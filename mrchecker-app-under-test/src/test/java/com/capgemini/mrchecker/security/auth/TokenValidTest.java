package com.capgemini.mrchecker.security.auth;

import static io.restassured.RestAssured.given;

import org.apache.http.HttpStatus;
import org.junit.Test;

import com.capgemini.mrchecker.security.EnvironmentParam;
import com.capgemini.mrchecker.security.SecurityTest;
import com.capgemini.mrchecker.security.SubUrlEnum;
import com.capgemini.mrchecker.security.session.SessionEnum;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.http.Headers;
import io.restassured.specification.RequestSpecification;

/**
 * The test verifies, that the application can not be accessed via a fabricated
 * token.
 * OWASP ASVS requirement V3.10: Verify that only session ids generated by
 * the application framework are recognized as active by the application.
 * Purpose: If one manages to access the application via a fabricated token,
 * then it is game over.
 * Read also: [1]
 * https://www.owasp.org/index.php/JSON_Web_Token_(JWT)_Cheat_Sheet_for_Java
 *
 * @author Marek Puchalski, Capgemini
 */
public class TokenValidTest extends SecurityTest {
	
	private static final String AUTH_HEADER = "Authorization";
	
	@Test
	public void testNoneAlgorithmToken() {
		
		Headers authHeaders = getSessionManager().getAuthHeaders(SessionEnum.WAITER);
		
		String validToken = authHeaders.getValue(AUTH_HEADER);
		String invalidToken = generateNoneAlgToken(validToken);
		
		RequestSpecification rs = new RequestSpecBuilder()
		        .addHeader(AUTH_HEADER, invalidToken)
		        .setBaseUri(EnvironmentParam.SECURITY_SERVER_ORIGIN.getValue())
		        .setBasePath(SubUrlEnum.ORDER_SEARCH.getValue())
		        .addHeader("Content-Type", "application/json")
		        .setBody("{\"pagination\":{\"size\":8,\"page\":1,\"total\":1},\"sort\":[]}")
		        .build();
		
		given(rs)
		        .when()
		        .post()
		        .then()
		        .statusCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);
	}
	
	private String generateNoneAlgToken(String validToken) {
		String[] parts = validToken.split("\\.");
		String prefix = "Bearer ";
		String algNoneBase64 = "eyJhbGciOiJub25lIn0"; // {"alg":"none"}
		return prefix + algNoneBase64 + "." + parts[1] + ".";
	}
}
